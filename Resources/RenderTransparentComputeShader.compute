#pragma kernel RenderTransparent
#pragma kernel ResetStartOffsetBuffer

#include "Packages/com.barkar.bsrp/ShaderLibrary/Common.hlsl"
#include "Packages/com.barkar.bsrp/ShaderLibrary/UnityInput.hlsl"
#include "Packages/com.barkar.bsrp/ShaderLibrary/OITUtils.hlsl"

RWTexture2D<float4> _LightAccumTexture : register(u0);

float GetDepth(uint encoded)
{
    uint depthInt = encoded >> 8;
    return float(depthInt) / 16777215.0;
}

float GetTransmission(uint encoded)
{
    uint transmissionInt = encoded & 255;
    return float(transmissionInt) / 255.0;
}

[numthreads(64,1,1)]
void ResetStartOffsetBuffer(uint3 dispatchThreadID)
{
    _LightAccumTexture[dispatchThreadID.x] = 0;
}


[numthreads(8, 8, 1)]
void RenderTransparent(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pos = dispatchThreadId.xy;
    Fragment frags[MAX_SORTED_PIXELS];

    int numFrags = 0;
    uint offsetAddress = 4 * (_RenderSizeParams.x * pos.y + pos.x);
    uint offset = _StartOffsetBuffer.Load(offsetAddress);

    //copy list to array
    [loop]
    while (offset != UINT_MAX && numFrags < MAX_SORTED_PIXELS)
    {
        frags[numFrags] = _FragmentLinksBuffer[offset];
        numFrags++;
        offset = frags[offset].next;
    }

    //sort
    [loop]
    for (uint i = 1; i < numFrags; i++)
    {
        Fragment insertFrag = frags[i];
        float depth = insertFrag.testdepth;//GetDepth(insertFrag.transmissionAndDepth);

        uint j = i;
        float pDepth = frags[j-1].testdepth;//GetDepth(frags[j - 1].transmissionAndDepth);

        while (j > 0 && depth > pDepth)
        {
            frags[j] = frags[j - 1];
            j--;
        }
        frags[j] = insertFrag;
    }

    //color
    float3 col = _LightAccumTexture[dispatchThreadId.xy].rgb;

    //combine
    for (uint i = 0; i < numFrags; i++)
    {
        Fragment frag = frags[i];
        float transmission = frag.testtransmission;//GetTransmission(frag.transmissionAndDepth);
        float3 rgb = frag.testColor;//FromRGBE(UnpackRGBA(frag.colour)).rgb;
        col = lerp(rgb, col, transmission);
    }

    _LightAccumTexture[pos] = float4(col, 1.0f);
}
