#pragma kernel ResetStartOffsetBuffer
#pragma kernel RenderTransparent

#include "Packages/com.barkar.bsrp/ShaderLibrary/Common.hlsl"
#include "Packages/com.barkar.bsrp/ShaderLibrary/UnityInput.hlsl"
#include "Packages/com.barkar.bsrp/ShaderLibrary/OITUtils.hlsl"

RWTexture2D<float4> _LightAccumTexture : register(u3);

float GetDepth(uint encoded)
{
    uint depthInt = encoded >> 8UL;
    return float(depthInt) / (pow(2, 24) - 1);
}



[numthreads(32, 32, 1)]
void ResetStartOffsetBuffer(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint index = 4 * (_RenderSizeParams.x * dispatchThreadId.y + dispatchThreadId.x); 
    _StartOffsetBuffer.Store(index, UINT_MAX);  
}


[numthreads(8, 8, 1)]
void RenderTransparent(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pos = dispatchThreadId.xy;
    Fragment frags[MAX_SORTED_PIXELS];

  
    uint offsetAddress = 4 * ((_RenderSizeParams.x * pos.y) + pos.x);
    uint offset = _StartOffsetBuffer.Load(offsetAddress);
    
    //copy list to array
    [loop]
    int numFrags = 0;
    while (offset != UINT_MAX && numFrags < MAX_SORTED_PIXELS)
    {
        frags[numFrags] = _FragmentLinksBuffer[offset];
        numFrags++;
        offset = _FragmentLinksBuffer[offset].next;
    }

    //sort
    [loop]
    for (int i = 1; i < numFrags; i++)
    {
        Fragment insertFrag = frags[i];
        uint j = i;
        while (j > 0 && insertFrag.depth > frags[j-1].depth)
        {
            frags[j] = frags[j - 1];
            j--;
        }
        frags[j] = insertFrag;
    }

    //color
    float3 col = _LightAccumTexture[pos].rgb;
    
    //combine
    for (int k = 0; k < numFrags; k++)
    {
        Fragment frag = frags[k];
        float4 rgba = UnpackRGBA(frag.color);
        float transmission = rgba.a;
        float3 rgb = rgba.rgb;
        col = lerp(rgb, col, transmission);
        
    }
   
    _LightAccumTexture[pos] = float4(col, 1.0);
   
}
